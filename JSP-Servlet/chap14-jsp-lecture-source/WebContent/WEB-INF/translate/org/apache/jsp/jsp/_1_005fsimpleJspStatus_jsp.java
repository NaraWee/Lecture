/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.65
 * Generated at: 2021-05-03 02:40:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _1_005fsimpleJspStatus_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	  	private String name;
	  	private int age;
	  
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 1. 페이지 지시자 태그 -->\r\n");
      out.write("<!-- 페이지에 대한 설정을 하는 지시자 태그이다.\r\n");
      out.write("\t 현재 페이지에 스크립트 태그(< %)를 이용하여 작성하는 문법은 자바라는 의미이며,\r\n");
      out.write("\t response header에 응답을 설정하는 것도 할 수 있다.\r\n");
      out.write("\t content-type이라는 헤더에 마임타입과 인코딩방식을 지정해두었다. -->\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- \r\n");
      out.write("\t\tJSP는 표면상으로는 HTML 문서와 유사하다.\r\n");
      out.write("\t\t하지만 JSP 컨테이너가 최초의 JSP를 요청할 시 JSP를 서블릿으로 변환시킨 후, 서블릿 컨테이너가 변환된 서블릿을 이용해\r\n");
      out.write("\t\t인스턴스를 생성하고 호출한다.\r\n");
      out.write("\t\tJSP는 매 요청 시 마다 기존 JSP 파일이 변환되었는지를 확인하여 변경이 없는 경우 기존에 생성해둔 인스턴스를 사용하고,\r\n");
      out.write("\t\t변경이 있는 경우 translate 과정을 거쳐 인스턴스를 다시 생성한다.\r\n");
      out.write("\t -->\r\n");
      out.write("\t \r\n");
      out.write("\t <!-- \r\n");
      out.write("\t \t jsp는 html 기반의 문서에서 자바 문법을 사용할 수 있도록 지원한다.\r\n");
      out.write("\t \t jsp의 태그 엘리먼트를 이용하여 사용 목적별로 자바 코드를 이용할 수 있도록 지원한다.\r\n");
      out.write("\t \t jsp의 태그 엘리먼트는 directive, declare, scriptlet, expression, comment가 있다.\r\n");
      out.write("\t  -->\r\n");
      out.write("\t  \r\n");
      out.write("\t  <!-- 2. jsp 주석 태그 -->\r\n");
      out.write("\t  ");
      out.write("\r\n");
      out.write("\t  \r\n");
      out.write("\t  <!-- 3. 선언 태그 -->\r\n");
      out.write("\t  <!-- 서블릿으로 변환 시 선언 태그내에 작성한 내용을 필드로 선언해준다. -->\r\n");
      out.write("\t  ");
      out.write("\r\n");
      out.write("\t  \r\n");
      out.write("\t  <!-- 4. scriptlet 태그 -->\r\n");
      out.write("\t  ");

	  	// 간단한 자바 코드를 작성할 수 있는 부분이다.
	  	/* scriptlet 태그 내에서의 주석은 자바 주석과 동일한다.
	  	   선언 태그에서 작성한 내용을 초기화 하고 출력할 수도 있으며, 간단한 로직 처리도 가능하다.
	  	   주의사항 : 작성하는 코드는 자바코드이기 때문에 ;(세미콜론)을 작성해주지 않으면 compile 과정에서 에러가 발생한다.
	  	*/
	  	name = "홍길동";
	  	age = 20;
	  	
	  	System.out.println("name : " + name);
	  	System.out.println("age : " + age);	
	  	
	  	for(int i = 0; i < name.length(); i++) {
	  		System.out.println(name.charAt(i));
	  	}
	  
      out.write("\r\n");
      out.write("\t  \r\n");
      out.write("\t  <!-- 5. expression 태그 -->\r\n");
      out.write("\t  <!-- PrintWriter를 이용하여 브라우저에 값을 내보내기하여 브라우저에서 보여지게 한다.\r\n");
      out.write("\t       자바 코드로 변환 시 out.print(); 괄호안에 expression 태그내에 작성한 내용이 들어가게 된다.\r\n");
      out.write("\t       out.print(name); 이런식으로 되어잇는 것이다.\r\n");
      out.write("\t   -->\r\n");
      out.write("\t   name : ");
      out.print( name );
      out.write("<br>\r\n");
      out.write("\t   age : ");
      out.print( age );
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
